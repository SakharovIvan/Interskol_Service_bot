import { ToolSPmatNo } from "../models.js";
import { Op } from "sequelize";
import botoptions from "../../botoptions.js";
import toolService from "./toolService.js";
import { SP_ServiceURL } from "../../config.js";
export default async function spInfoService(spmatNo) {
  let result = {};

  try {
    const sp_search = await fetch(SP_ServiceURL + "/" + spmatNo, {
      method: "GET",
    });
    const spinfo = await sp_search.json();

    if (spinfo) {
      const { name, char, price, warehousestatus, spmatNo } = spinfo;
      const text = `${spmatNo}\n${name}\n
‚öíÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${char || "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}\n
üíµ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${price || "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"} —Ä—É–±\n
üè† –°–∫–ª–∞–¥: ${warehousestatus || "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}`;
      result.spinfoanswer = { text, option: botoptions.defaultoption };
      const toolsByspmas = await ToolSPmatNo.findAll({
        where: {
          [Op.or]: [{ spmatNo: spmatNo }],
        },
      });
      const tools_inline_keyboard_promise = toolsByspmas.map(async (el) => {
        const { tool_code } = el.dataValues;
        return toolService.toolInfo(tool_code).then((res) => {
          if (!res[0]) {
            return [
              {
                text: `${tool_code} - –Ω–µ—Ç —Å—Ö–µ–º—ã`,
                callback_data: `${tool_code}`,
              },
            ];
          }
          return [
            {
              text: res[0].dataValues.tool_name.slice(0, -4),
              callback_data: tool_code,
            },
          ];
        });
      });

      const analogmas_ = await fetch(SP_ServiceURL + "/analog/" + spmatNo, {
        method: "GET",
      });
      const analogmas = await analogmas_.json();

      const analog_inline_keyboard_promise = analogmas.map((el) => {
        return [{ text: el.spmatNoanalog, callback_data: el.spmatNoanalog }];
      });

      const tools_inline_keyboard = await Promise.all(
        tools_inline_keyboard_promise
      );
      const analog_inline_keyboard = await Promise.all(
        analog_inline_keyboard_promise
      );
      result.toolsForSP = {
        text: "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
        option: tools_inline_keyboard,
      };
      result.analogSP = {
        text: "–ï—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏ üîÅ",
        option: analog_inline_keyboard,
      };
    } else {
      result.noInfo = {
        text: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ó–ß –Ω–µ –Ω–∞–π–¥–µ–Ω–æ((",
        option: botoptions.defaultoption,
      };
    }
    return result;
  } catch (error) {
    return ({noInfo :{
      text: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ó–ß –Ω–µ –Ω–∞–π–¥–µ–Ω–æ((",
      option: botoptions.defaultoption,
    }});
  }
}
